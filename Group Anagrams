class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String,List<String>> map = new HashMap<>();
        for(int i=0; i< strs.length; i++){
            String s = strs[i];
            char c[] = s.toCharArray();
            Arrays.sort(c);
            String key = new String(c);
            map.computeIfAbsent(key, k -> new ArrayList<>()).add(s);
        }
        return new ArrayList<>(map.values()); 
    }
}

// Approach-2

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String,List<String>> map = new HashMap<>();
        for(int i=0; i<strs.length; i++){
            String words = strs[i];
            int countArr[] = new int [26];
        

        for (int j = 0; j < words.length(); j++) {
                char c = words.charAt(j);
                countArr[c - 'a']++;
            }
        StringBuilder sb = new StringBuilder();
        for (int k = 0; k < countArr.length; k++) {
                sb.append('#');
                sb.append(countArr[k]);
            }
            String key = sb.toString();
            map.computeIfAbsent(key, x -> new ArrayList<>()).add(words);
        }
        return new ArrayList<>(map.values());
    }
}
