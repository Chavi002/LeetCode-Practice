// Brute force
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int maxLength = 1;
        for(int i =0; i < nums.length ; i++){
            int count = 1;
            int x = nums[i];
            for(int j = 0; j < nums.length; j++){
                if(nums[j] == x+1){
                    count++;
                    j =- 1; //reset j to begin again
                    x = x+1;
                    maxLength = Math.max(maxLength, count);
                }  
            }
        }
    return maxLength;
    }
}

// Better solution

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        } 
        int longestSeq = 1;
        int length = 1;
        Arrays.sort(nums);

        for(int i = 1; i < nums.length ; i ++){
            if(nums[i] == nums[i-1]){
                continue; //do not count
            }else if(nums[i] == nums[i-1]+1){
                length++;
            }else{
                // reset length to 1
                length = 1;
            }
            longestSeq = Math.max(length, longestSeq);
        }
        return longestSeq;
    }
}

// Optimized solution

class Solution {
    public int longestConsecutive(int[] nums){
        Set<Integer> set = new HashSet<>();
        
        int maxLength = 1;
        if(nums.length == 0){
            return 0;
        }
        for(int i=0; i < nums.length ; i++){
            set.add(nums[i]);
        }
        for (int num : set) {
            if(!set.contains(num-1)){
                int length = 1;
                int currentNum = num;

            while(set.contains(currentNum+1)){
                currentNum++;
                length++;
                }
            maxLength = Math.max(length, maxLength);
            }
        }
    return maxLength;    
    }
}
