// class Solution {
//     public int NoOfdays(int[] weights, int daysAllowed, int capacity) {
//         int daysUsed = 1;
//         int load = 0;

//         for (int i = 0; i < weights.length; i++) {
//             if (load + weights[i] > capacity) {
//                 daysUsed++;
//                 load = weights[i];  
//             } else {
//                 load += weights[i];  
//             }
//         }

//         return daysUsed;
//     }

//     public int shipWithinDays(int[] weights, int days) {
//         int maxWeight = 0;
//         int totalWeight = 0;

//         for (int i = 0; i < weights.length; i++) {
//             maxWeight = Math.max(maxWeight, weights[i]);
//             totalWeight += weights[i]; 
//         }
//         for (int capacity = maxWeight; capacity <= totalWeight; capacity++) {
//             int daysRequired = NoOfdays(weights, days, capacity);
//                 if(daysRequired <= days){
//                 return capacity;
//             } 
//         }
//         return -1;
//     }
// }

//Binary Search Solution
class Solution {
    public int NoOfdays(int[] weights, int daysAllowed, int capacity) {
        int daysUsed = 1;
        int load = 0;

        for (int i = 0; i < weights.length; i++) {
            if (load + weights[i] > capacity) {
                daysUsed++;
                load = weights[i];  
            } else {
                load += weights[i];  
            }
        }

        return daysUsed;
    }
   public int shipWithinDays(int[] weights, int days) {
        int maxWeight = 0;
        int totalWeight = 0;
        for (int i = 0; i < weights.length; i++) {
            maxWeight = Math.max(maxWeight, weights[i]);
            totalWeight += weights[i]; 
        }
        int low = maxWeight;
        int high = totalWeight;

        while(low<high){
            int mid = (low+high)/2;
            int foundDays = NoOfdays(weights, days, mid);

            if(foundDays<=days){
                high = mid;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
}
