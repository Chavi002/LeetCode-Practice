Approach-1
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set =new HashSet<>();
        List<Integer> list = new ArrayList<>();

        for(int i = 0; i< nums1.length; i++){
            if(!set.contains(nums1[i])){
                set.add(nums1[i]);
            };
        }

        for(int i = 0; i < nums2.length; i++){
            if(set.contains(nums2[i])){
                list.add(nums2[i]);
                set.remove(nums2[i]);    
            }
        }
        int[] result = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }

        return result;
    }    
}

Approach-2
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;

        while(i < nums1.length && j < nums2.length){
            if(nums1[i] < nums2[j]){
                i++;
            }else if(nums2[j] < nums1[i]){
                j++;
            }
            else if(nums1[i] == nums2[j]){
                if(list.isEmpty() || list.get(list.size()-1) != nums1[i]){
                    list.add(nums1[i]);
                }
                i++;
                j++;
            }    
        }
        int[] result = new int[list.size()];
        for (int k = 0; k < list.size(); k++) {
            result[k] = list.get(k);
        }
    return result;
    }
}
